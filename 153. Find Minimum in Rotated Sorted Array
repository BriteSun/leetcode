//要求在一个轮转了的排序数组里面找到一个最小值,采用二分法来做.
//对于区间A, 如果A[start] < A[stop], 那么该区间一定是有序的了. A[mid] ,mid = (start + stop ) / 2. 因为无重复元素,那么有两种情况:
// 1. A[mid] > A[start] , 那么最小值一定在右半区间.
// 2. A[mid] < A[start] , 那么最小值一定在左半区间.  

//代码:
class	Solution	{
public:
int	findMin(vector<int>	&num)	{
    int	size	=	num.size();
    if(size	==	0)	{
                    return	0;
    }	else if(size	==	1)	{
                    return	num[0];
    }	else if(size	==	2)	{
                    return	min(num[0],	num[1]);
    }
    int	start	=	0;
    int	stop	=	size - 1;
    while(start	<	stop - 1)	{
                    if(num[start] <	num[stop])	{
                                    return	num[start];
                    }
                    int	mid	= start	+ (stop	- start) / 2;
                    if(num[mid]	>	num[start])	{
                                    start	=	mid;
                    }	else	if(num[mid]	<	num[start])	{
                                    stop	=	mid;
                    }
    }
    return	min(num[start],	num[stop]);
				}
};
